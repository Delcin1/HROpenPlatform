// Package chat provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package chat

import (
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for HandleWebSocketParamsConnection.
const (
	Upgrade HandleWebSocketParamsConnection = "upgrade"
)

// Defines values for HandleWebSocketParamsUpgrade.
const (
	Websocket HandleWebSocketParamsUpgrade = "websocket"
)

// Defines values for HandleWebSocketParamsSecWebSocketVersion.
const (
	N13 HandleWebSocketParamsSecWebSocketVersion = "13"
)

// Chat defines model for Chat.
type Chat struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
	Users     []string  `json:"users"`
}

// ChatWithLastMessage defines model for ChatWithLastMessage.
type ChatWithLastMessage struct {
	Chat        Chat     `json:"chat"`
	LastMessage *Message `json:"last_message,omitempty"`
	UnreadCount int      `json:"unread_count"`
}

// CreateChatRequest defines model for CreateChatRequest.
type CreateChatRequest struct {
	Users []string `json:"users"`
}

// Message defines model for Message.
type Message struct {
	ChatId    string    `json:"chat_id"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	Text      string    `json:"text"`
	UserId    string    `json:"user_id"`
}

// SendMessageRequest defines model for SendMessageRequest.
type SendMessageRequest struct {
	Text string `json:"text"`
}

// GetChatMessagesParams defines parameters for GetChatMessages.
type GetChatMessagesParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// HandleWebSocketParams defines parameters for HandleWebSocket.
type HandleWebSocketParams struct {
	Token               string                                   `form:"token" json:"token"`
	Connection          HandleWebSocketParamsConnection          `json:"Connection"`
	Upgrade             HandleWebSocketParamsUpgrade             `json:"Upgrade"`
	SecWebSocketVersion HandleWebSocketParamsSecWebSocketVersion `json:"Sec-WebSocket-Version"`
	SecWebSocketKey     string                                   `json:"Sec-WebSocket-Key"`
}

// HandleWebSocketParamsConnection defines parameters for HandleWebSocket.
type HandleWebSocketParamsConnection string

// HandleWebSocketParamsUpgrade defines parameters for HandleWebSocket.
type HandleWebSocketParamsUpgrade string

// HandleWebSocketParamsSecWebSocketVersion defines parameters for HandleWebSocket.
type HandleWebSocketParamsSecWebSocketVersion string

// CreateChatJSONRequestBody defines body for CreateChat for application/json ContentType.
type CreateChatJSONRequestBody = CreateChatRequest

// SendMessageJSONRequestBody defines body for SendMessage for application/json ContentType.
type SendMessageJSONRequestBody = SendMessageRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get user chats
	// (GET /api/v1/chat)
	GetUserChats(w http.ResponseWriter, r *http.Request)
	// Create new chat
	// (POST /api/v1/chat)
	CreateChat(w http.ResponseWriter, r *http.Request)
	// Get chat messages
	// (GET /api/v1/chat/{chat_id}/messages)
	GetChatMessages(w http.ResponseWriter, r *http.Request, chatId string, params GetChatMessagesParams)
	// Send message
	// (POST /api/v1/chat/{chat_id}/messages)
	SendMessage(w http.ResponseWriter, r *http.Request, chatId string)
	// WebSocket connection for real-time chat
	// (GET /api/v1/chat/{chat_id}/ws)
	HandleWebSocket(w http.ResponseWriter, r *http.Request, chatId string, params HandleWebSocketParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get user chats
// (GET /api/v1/chat)
func (_ Unimplemented) GetUserChats(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create new chat
// (POST /api/v1/chat)
func (_ Unimplemented) CreateChat(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get chat messages
// (GET /api/v1/chat/{chat_id}/messages)
func (_ Unimplemented) GetChatMessages(w http.ResponseWriter, r *http.Request, chatId string, params GetChatMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send message
// (POST /api/v1/chat/{chat_id}/messages)
func (_ Unimplemented) SendMessage(w http.ResponseWriter, r *http.Request, chatId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// WebSocket connection for real-time chat
// (GET /api/v1/chat/{chat_id}/ws)
func (_ Unimplemented) HandleWebSocket(w http.ResponseWriter, r *http.Request, chatId string, params HandleWebSocketParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetUserChats operation middleware
func (siw *ServerInterfaceWrapper) GetUserChats(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserChats(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateChat operation middleware
func (siw *ServerInterfaceWrapper) CreateChat(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateChat(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetChatMessages operation middleware
func (siw *ServerInterfaceWrapper) GetChatMessages(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "chat_id" -------------
	var chatId string

	err = runtime.BindStyledParameterWithOptions("simple", "chat_id", chi.URLParam(r, "chat_id"), &chatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chat_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatMessagesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChatMessages(w, r, chatId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SendMessage operation middleware
func (siw *ServerInterfaceWrapper) SendMessage(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "chat_id" -------------
	var chatId string

	err = runtime.BindStyledParameterWithOptions("simple", "chat_id", chi.URLParam(r, "chat_id"), &chatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chat_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendMessage(w, r, chatId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// HandleWebSocket operation middleware
func (siw *ServerInterfaceWrapper) HandleWebSocket(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "chat_id" -------------
	var chatId string

	err = runtime.BindStyledParameterWithOptions("simple", "chat_id", chi.URLParam(r, "chat_id"), &chatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chat_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HandleWebSocketParams

	// ------------- Required query parameter "token" -------------

	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "Connection" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Connection")]; found {
		var Connection HandleWebSocketParamsConnection
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Connection", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Connection", valueList[0], &Connection, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Connection", Err: err})
			return
		}

		params.Connection = Connection

	} else {
		err := fmt.Errorf("Header parameter Connection is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Connection", Err: err})
		return
	}

	// ------------- Required header parameter "Upgrade" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Upgrade")]; found {
		var Upgrade HandleWebSocketParamsUpgrade
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Upgrade", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Upgrade", valueList[0], &Upgrade, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Upgrade", Err: err})
			return
		}

		params.Upgrade = Upgrade

	} else {
		err := fmt.Errorf("Header parameter Upgrade is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Upgrade", Err: err})
		return
	}

	// ------------- Required header parameter "Sec-WebSocket-Version" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sec-WebSocket-Version")]; found {
		var SecWebSocketVersion HandleWebSocketParamsSecWebSocketVersion
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Sec-WebSocket-Version", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sec-WebSocket-Version", valueList[0], &SecWebSocketVersion, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Sec-WebSocket-Version", Err: err})
			return
		}

		params.SecWebSocketVersion = SecWebSocketVersion

	} else {
		err := fmt.Errorf("Header parameter Sec-WebSocket-Version is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Sec-WebSocket-Version", Err: err})
		return
	}

	// ------------- Required header parameter "Sec-WebSocket-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sec-WebSocket-Key")]; found {
		var SecWebSocketKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Sec-WebSocket-Key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sec-WebSocket-Key", valueList[0], &SecWebSocketKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Sec-WebSocket-Key", Err: err})
			return
		}

		params.SecWebSocketKey = SecWebSocketKey

	} else {
		err := fmt.Errorf("Header parameter Sec-WebSocket-Key is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Sec-WebSocket-Key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HandleWebSocket(w, r, chatId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/chat", wrapper.GetUserChats)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/chat", wrapper.CreateChat)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/chat/{chat_id}/messages", wrapper.GetChatMessages)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/chat/{chat_id}/messages", wrapper.SendMessage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/chat/{chat_id}/ws", wrapper.HandleWebSocket)
	})

	return r
}
