// Package company provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package company

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ApiCreateCompany defines model for ApiCreateCompany.
type ApiCreateCompany struct {
	// Address Адрес компании
	Address *string `json:"address,omitempty"`

	// Avatar Логотип компании
	Avatar *string `json:"avatar,omitempty"`

	// Description Описание компании
	Description *string `json:"description,omitempty"`

	// Email Email компании
	Email *string `json:"email,omitempty"`

	// Name Название компании
	Name string `json:"name"`

	// Phone Телефон компании
	Phone *string `json:"phone,omitempty"`

	// ShortLinkName Уникальное название компании для короткой ссылки
	ShortLinkName *string `json:"short_link_name,omitempty"`

	// Website Сайт компании
	Website *string `json:"website,omitempty"`
}

// ApiGetCompany defines model for ApiGetCompany.
type ApiGetCompany struct {
	// Address Адрес компании
	Address *string `json:"address,omitempty"`

	// Avatar Логотип компании
	Avatar *string `json:"avatar,omitempty"`

	// Description Описание компании
	Description *string `json:"description,omitempty"`

	// Email Email компании
	Email *string `json:"email,omitempty"`

	// Guid GUID компании
	Guid string `json:"guid"`

	// Name Название компании
	Name string `json:"name"`

	// Phone Телефон компании
	Phone *string `json:"phone,omitempty"`

	// ShortLinkName Уникальное название компании для короткой ссылки
	ShortLinkName *string `json:"short_link_name,omitempty"`

	// Website Сайт компании
	Website *string `json:"website,omitempty"`
}

// ApiSearchCompanyResp defines model for ApiSearchCompanyResp.
type ApiSearchCompanyResp struct {
	Companies []ShortCompany `json:"companies"`
}

// ApiUpdateCompany defines model for ApiUpdateCompany.
type ApiUpdateCompany struct {
	// Address Адрес компании
	Address *string `json:"address,omitempty"`

	// Avatar Логотип компании
	Avatar *string `json:"avatar,omitempty"`

	// Description Описание компании
	Description *string `json:"description,omitempty"`

	// Email Email компании
	Email *string `json:"email,omitempty"`

	// Name Название компании
	Name *string `json:"name,omitempty"`

	// Phone Телефон компании
	Phone *string `json:"phone,omitempty"`

	// ShortLinkName Уникальное название компании для короткой ссылки
	ShortLinkName *string `json:"short_link_name,omitempty"`

	// Website Сайт компании
	Website *string `json:"website,omitempty"`
}

// ShortCompany defines model for ShortCompany.
type ShortCompany struct {
	// Guid GUID компании
	Guid string `json:"guid"`

	// Name Название компании
	Name string `json:"name"`

	// ShortLinkName Уникальное название компании для короткой ссылки
	ShortLinkName *string `json:"short_link_name,omitempty"`
}

// SearchCompanyByNameParams defines parameters for SearchCompanyByName.
type SearchCompanyByNameParams struct {
	// Name Часть названия компании
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// CreateCompanyProfileJSONRequestBody defines body for CreateCompanyProfile for application/json ContentType.
type CreateCompanyProfileJSONRequestBody = ApiCreateCompany

// UpdateCompanyProfileJSONRequestBody defines body for UpdateCompanyProfile for application/json ContentType.
type UpdateCompanyProfileJSONRequestBody = ApiUpdateCompany

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Создать компанию
	// (POST /api/v1/company)
	CreateCompanyProfile(w http.ResponseWriter, r *http.Request)
	// Получить данные чужой компании по названию
	// (GET /api/v1/company/search)
	SearchCompanyByName(w http.ResponseWriter, r *http.Request, params SearchCompanyByNameParams)
	// Удалить компанию
	// (DELETE /api/v1/company/{company_id})
	DeleteCompany(w http.ResponseWriter, r *http.Request, companyId string)
	// Получить данные компании
	// (GET /api/v1/company/{company_id})
	FetchCompany(w http.ResponseWriter, r *http.Request, companyId string)
	// Изменить данные компании
	// (PUT /api/v1/company/{company_id})
	UpdateCompanyProfile(w http.ResponseWriter, r *http.Request, companyId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Создать компанию
// (POST /api/v1/company)
func (_ Unimplemented) CreateCompanyProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить данные чужой компании по названию
// (GET /api/v1/company/search)
func (_ Unimplemented) SearchCompanyByName(w http.ResponseWriter, r *http.Request, params SearchCompanyByNameParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Удалить компанию
// (DELETE /api/v1/company/{company_id})
func (_ Unimplemented) DeleteCompany(w http.ResponseWriter, r *http.Request, companyId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить данные компании
// (GET /api/v1/company/{company_id})
func (_ Unimplemented) FetchCompany(w http.ResponseWriter, r *http.Request, companyId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Изменить данные компании
// (PUT /api/v1/company/{company_id})
func (_ Unimplemented) UpdateCompanyProfile(w http.ResponseWriter, r *http.Request, companyId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateCompanyProfile operation middleware
func (siw *ServerInterfaceWrapper) CreateCompanyProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCompanyProfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchCompanyByName operation middleware
func (siw *ServerInterfaceWrapper) SearchCompanyByName(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchCompanyByNameParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchCompanyByName(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteCompany operation middleware
func (siw *ServerInterfaceWrapper) DeleteCompany(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "company_id" -------------
	var companyId string

	err = runtime.BindStyledParameterWithOptions("simple", "company_id", chi.URLParam(r, "company_id"), &companyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "company_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCompany(w, r, companyId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// FetchCompany operation middleware
func (siw *ServerInterfaceWrapper) FetchCompany(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "company_id" -------------
	var companyId string

	err = runtime.BindStyledParameterWithOptions("simple", "company_id", chi.URLParam(r, "company_id"), &companyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "company_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchCompany(w, r, companyId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateCompanyProfile operation middleware
func (siw *ServerInterfaceWrapper) UpdateCompanyProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "company_id" -------------
	var companyId string

	err = runtime.BindStyledParameterWithOptions("simple", "company_id", chi.URLParam(r, "company_id"), &companyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "company_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCompanyProfile(w, r, companyId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/company", wrapper.CreateCompanyProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/company/search", wrapper.SearchCompanyByName)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/company/{company_id}", wrapper.DeleteCompany)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/company/{company_id}", wrapper.FetchCompany)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/company/{company_id}", wrapper.UpdateCompanyProfile)
	})

	return r
}
