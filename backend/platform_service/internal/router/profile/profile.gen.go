// Package profile provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package profile

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ApiGetExperience defines model for ApiGetExperience.
type ApiGetExperience struct {
	Experience []Experience `json:"experience"`
}

// ApiGetProfile defines model for ApiGetProfile.
type ApiGetProfile struct {
	// Avatar Ссылка на аватар пользователя
	Avatar *string `json:"avatar,omitempty"`

	// Birthdate Дата рождения пользователя
	Birthdate string `json:"birthdate"`

	// CompanyName Название компании в которой работает пользователь
	CompanyName *string   `json:"company_name,omitempty"`
	CreatedAt   time.Time `json:"created_at"`

	// Cv Ссылка на резюме пользователя
	Cv *string `json:"cv,omitempty"`

	// Description ФИО пользователя
	Description string `json:"description"`

	// Email Email пользователя
	Email string `json:"email"`

	// Gender Пол пользователя
	Gender string `json:"gender"`

	// Guid GUID пользователя
	Guid string `json:"guid"`

	// IsHr Является ли пользователь HR'ом
	IsHr bool `json:"is_hr"`

	// Phone Номер телефона
	Phone     string    `json:"phone"`
	UpdatedAt time.Time `json:"updated_at"`
}

// ApiSearchProfileResp defines model for ApiSearchProfileResp.
type ApiSearchProfileResp struct {
	Profiles []ShortProfile `json:"profiles"`
}

// ApiUpdateExperience defines model for ApiUpdateExperience.
type ApiUpdateExperience struct {
	Experience []Experience `json:"experience"`
}

// ApiUpdateProfile defines model for ApiUpdateProfile.
type ApiUpdateProfile struct {
	// Avatar Ссылка на аватар пользователя
	Avatar *string `json:"avatar,omitempty"`

	// Birthdate Дата рождения пользователя
	Birthdate *string `json:"birthdate,omitempty"`

	// Cv Ссылка на резюме пользователя
	Cv *string `json:"cv,omitempty"`

	// Description ФИО пользователя
	Description *string `json:"description,omitempty"`

	// Email Email пользователя
	Email *string `json:"email,omitempty"`

	// Gender Пол пользователя
	Gender *string `json:"gender,omitempty"`

	// Phone Номер телефона
	Phone *string `json:"phone,omitempty"`
}

// Experience defines model for Experience.
type Experience struct {
	// CompanyName Название компании
	CompanyName string `json:"company_name"`

	// EndDate Дата окончания работы
	EndDate *string `json:"end_date,omitempty"`

	// Guid GUID компании
	Guid *string `json:"guid,omitempty"`

	// Position Должность
	Position string `json:"position"`

	// StartDate Дата начала работы
	StartDate string `json:"start_date"`
}

// ShortProfile defines model for ShortProfile.
type ShortProfile struct {
	// CompanyName Название компании в которой работает пользователь
	CompanyName *string `json:"company_name,omitempty"`

	// Description ФИО пользователя
	Description string `json:"description"`

	// Guid GUID пользователя
	Guid string `json:"guid"`

	// IsHr Является ли пользователь HR'ом
	IsHr      bool      `json:"is_hr"`
	UpdatedAt time.Time `json:"updated_at"`
}

// SearchProfileByDescriptionParams defines parameters for SearchProfileByDescription.
type SearchProfileByDescriptionParams struct {
	// Description Часть ФИО
	Description string `form:"description" json:"description"`
}

// StoreOwnProfileJSONRequestBody defines body for StoreOwnProfile for application/json ContentType.
type StoreOwnProfileJSONRequestBody = ApiUpdateProfile

// StoreOwnExperienceJSONRequestBody defines body for StoreOwnExperience for application/json ContentType.
type StoreOwnExperienceJSONRequestBody = ApiUpdateExperience

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Удалить профиль
	// (DELETE /api/v1/profile)
	DeleteOwnProfile(w http.ResponseWriter, r *http.Request)
	// Получить данные профиля
	// (GET /api/v1/profile)
	FetchOwnProfile(w http.ResponseWriter, r *http.Request)
	// Изменить данных профиля
	// (PUT /api/v1/profile)
	StoreOwnProfile(w http.ResponseWriter, r *http.Request)
	// Получить данные опыта работы
	// (GET /api/v1/profile/experience)
	FetchOwnExperience(w http.ResponseWriter, r *http.Request)
	// Изменить данные опыта работы
	// (PUT /api/v1/profile/experience)
	StoreOwnExperience(w http.ResponseWriter, r *http.Request)
	// Найти данные чужого профиля по части ФИО
	// (GET /api/v1/profile/search)
	SearchProfileByDescription(w http.ResponseWriter, r *http.Request, params SearchProfileByDescriptionParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Удалить профиль
// (DELETE /api/v1/profile)
func (_ Unimplemented) DeleteOwnProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить данные профиля
// (GET /api/v1/profile)
func (_ Unimplemented) FetchOwnProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Изменить данных профиля
// (PUT /api/v1/profile)
func (_ Unimplemented) StoreOwnProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить данные опыта работы
// (GET /api/v1/profile/experience)
func (_ Unimplemented) FetchOwnExperience(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Изменить данные опыта работы
// (PUT /api/v1/profile/experience)
func (_ Unimplemented) StoreOwnExperience(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Найти данные чужого профиля по части ФИО
// (GET /api/v1/profile/search)
func (_ Unimplemented) SearchProfileByDescription(w http.ResponseWriter, r *http.Request, params SearchProfileByDescriptionParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteOwnProfile operation middleware
func (siw *ServerInterfaceWrapper) DeleteOwnProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteOwnProfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// FetchOwnProfile operation middleware
func (siw *ServerInterfaceWrapper) FetchOwnProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchOwnProfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// StoreOwnProfile operation middleware
func (siw *ServerInterfaceWrapper) StoreOwnProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StoreOwnProfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// FetchOwnExperience operation middleware
func (siw *ServerInterfaceWrapper) FetchOwnExperience(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchOwnExperience(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// StoreOwnExperience operation middleware
func (siw *ServerInterfaceWrapper) StoreOwnExperience(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StoreOwnExperience(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchProfileByDescription operation middleware
func (siw *ServerInterfaceWrapper) SearchProfileByDescription(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchProfileByDescriptionParams

	// ------------- Required query parameter "description" -------------

	if paramValue := r.URL.Query().Get("description"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "description"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "description", r.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "description", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchProfileByDescription(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/profile", wrapper.DeleteOwnProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/profile", wrapper.FetchOwnProfile)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/profile", wrapper.StoreOwnProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/profile/experience", wrapper.FetchOwnExperience)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/profile/experience", wrapper.StoreOwnExperience)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/profile/search", wrapper.SearchProfileByDescription)
	})

	return r
}
