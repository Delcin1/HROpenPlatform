// Package job provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package job

import (
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ApplicationStatusStatus.
const (
	ApplicationStatusStatusAccepted ApplicationStatusStatus = "accepted"
	ApplicationStatusStatusPending  ApplicationStatusStatus = "pending"
	ApplicationStatusStatusRejected ApplicationStatusStatus = "rejected"
	ApplicationStatusStatusReviewed ApplicationStatusStatus = "reviewed"
)

// Defines values for CreateJobRequestEmploymentType.
const (
	CreateJobRequestEmploymentTypeContract   CreateJobRequestEmploymentType = "contract"
	CreateJobRequestEmploymentTypeFullTime   CreateJobRequestEmploymentType = "full-time"
	CreateJobRequestEmploymentTypeInternship CreateJobRequestEmploymentType = "internship"
	CreateJobRequestEmploymentTypePartTime   CreateJobRequestEmploymentType = "part-time"
	CreateJobRequestEmploymentTypeRemote     CreateJobRequestEmploymentType = "remote"
)

// Defines values for JobEmploymentType.
const (
	JobEmploymentTypeContract   JobEmploymentType = "contract"
	JobEmploymentTypeFullTime   JobEmploymentType = "full-time"
	JobEmploymentTypeInternship JobEmploymentType = "internship"
	JobEmploymentTypePartTime   JobEmploymentType = "part-time"
	JobEmploymentTypeRemote     JobEmploymentType = "remote"
)

// Defines values for JobStatus.
const (
	JobStatusActive JobStatus = "active"
	JobStatusClosed JobStatus = "closed"
	JobStatusPaused JobStatus = "paused"
)

// Defines values for JobApplicationStatus.
const (
	JobApplicationStatusAccepted JobApplicationStatus = "accepted"
	JobApplicationStatusPending  JobApplicationStatus = "pending"
	JobApplicationStatusRejected JobApplicationStatus = "rejected"
	JobApplicationStatusReviewed JobApplicationStatus = "reviewed"
)

// Defines values for UpdateApplicationStatusRequestStatus.
const (
	Accepted UpdateApplicationStatusRequestStatus = "accepted"
	Pending  UpdateApplicationStatusRequestStatus = "pending"
	Rejected UpdateApplicationStatusRequestStatus = "rejected"
	Reviewed UpdateApplicationStatusRequestStatus = "reviewed"
)

// Defines values for UpdateJobRequestEmploymentType.
const (
	Contract   UpdateJobRequestEmploymentType = "contract"
	FullTime   UpdateJobRequestEmploymentType = "full-time"
	Internship UpdateJobRequestEmploymentType = "internship"
	PartTime   UpdateJobRequestEmploymentType = "part-time"
	Remote     UpdateJobRequestEmploymentType = "remote"
)

// Defines values for UpdateJobRequestStatus.
const (
	UpdateJobRequestStatusActive UpdateJobRequestStatus = "active"
	UpdateJobRequestStatusClosed UpdateJobRequestStatus = "closed"
	UpdateJobRequestStatusPaused UpdateJobRequestStatus = "paused"
)

// ApplicantProfile defines model for ApplicantProfile.
type ApplicantProfile struct {
	Avatar      *string `json:"avatar"`
	Description string  `json:"description"`
	Email       string  `json:"email"`
	Id          string  `json:"id"`
}

// ApplicationStatus defines model for ApplicationStatus.
type ApplicationStatus struct {
	ApplicationId *string                  `json:"application_id"`
	HasApplied    bool                     `json:"has_applied"`
	Status        *ApplicationStatusStatus `json:"status"`
}

// ApplicationStatusStatus defines model for ApplicationStatus.Status.
type ApplicationStatusStatus string

// CreateJobRequest defines model for CreateJobRequest.
type CreateJobRequest struct {
	CompanyName    string                         `json:"company_name"`
	Description    string                         `json:"description"`
	EmploymentType CreateJobRequestEmploymentType `json:"employment_type"`
	Location       string                         `json:"location"`
	Requirements   string                         `json:"requirements"`
	SalaryFrom     *int                           `json:"salary_from"`
	SalaryTo       *int                           `json:"salary_to"`
	Title          string                         `json:"title"`
}

// CreateJobRequestEmploymentType defines model for CreateJobRequest.EmploymentType.
type CreateJobRequestEmploymentType string

// Job defines model for Job.
type Job struct {
	AuthorId       string            `json:"author_id"`
	CompanyName    string            `json:"company_name"`
	CreatedAt      time.Time         `json:"created_at"`
	Description    string            `json:"description"`
	EmploymentType JobEmploymentType `json:"employment_type"`
	Id             string            `json:"id"`
	Location       string            `json:"location"`
	Requirements   string            `json:"requirements"`
	SalaryFrom     *int              `json:"salary_from"`
	SalaryTo       *int              `json:"salary_to"`
	Status         JobStatus         `json:"status"`
	Title          string            `json:"title"`
	UpdatedAt      time.Time         `json:"updated_at"`
}

// JobEmploymentType defines model for Job.EmploymentType.
type JobEmploymentType string

// JobStatus defines model for Job.Status.
type JobStatus string

// JobApplication defines model for JobApplication.
type JobApplication struct {
	ApplicantId      string               `json:"applicant_id"`
	ApplicantProfile ApplicantProfile     `json:"applicant_profile"`
	AppliedAt        time.Time            `json:"applied_at"`
	Id               string               `json:"id"`
	JobId            string               `json:"job_id"`
	Status           JobApplicationStatus `json:"status"`
}

// JobApplicationStatus defines model for JobApplication.Status.
type JobApplicationStatus string

// JobDetails defines model for JobDetails.
type JobDetails struct {
	Applications *[]JobApplication `json:"applications"`
	CanApply     bool              `json:"can_apply"`
	HasApplied   bool              `json:"has_applied"`
	IsAuthor     bool              `json:"is_author"`
	Job          Job               `json:"job"`
}

// JobWithApplications defines model for JobWithApplications.
type JobWithApplications struct {
	ApplicationsCount int `json:"applications_count"`
	Job               Job `json:"job"`
}

// UpdateApplicationStatusRequest defines model for UpdateApplicationStatusRequest.
type UpdateApplicationStatusRequest struct {
	Status UpdateApplicationStatusRequestStatus `json:"status"`
}

// UpdateApplicationStatusRequestStatus defines model for UpdateApplicationStatusRequest.Status.
type UpdateApplicationStatusRequestStatus string

// UpdateJobRequest defines model for UpdateJobRequest.
type UpdateJobRequest struct {
	CompanyName    string                         `json:"company_name"`
	Description    string                         `json:"description"`
	EmploymentType UpdateJobRequestEmploymentType `json:"employment_type"`
	Location       string                         `json:"location"`
	Requirements   string                         `json:"requirements"`
	SalaryFrom     *int                           `json:"salary_from"`
	SalaryTo       *int                           `json:"salary_to"`
	Status         UpdateJobRequestStatus         `json:"status"`
	Title          string                         `json:"title"`
}

// UpdateJobRequestEmploymentType defines model for UpdateJobRequest.EmploymentType.
type UpdateJobRequestEmploymentType string

// UpdateJobRequestStatus defines model for UpdateJobRequest.Status.
type UpdateJobRequestStatus string

// GetAllJobsParams defines parameters for GetAllJobs.
type GetAllJobsParams struct {
	Search *string `form:"search,omitempty" json:"search,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetMyJobsParams defines parameters for GetMyJobs.
type GetMyJobsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetJobApplicationsParams defines parameters for GetJobApplications.
type GetJobApplicationsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CreateJobJSONRequestBody defines body for CreateJob for application/json ContentType.
type CreateJobJSONRequestBody = CreateJobRequest

// UpdateJobJSONRequestBody defines body for UpdateJob for application/json ContentType.
type UpdateJobJSONRequestBody = UpdateJobRequest

// UpdateJobApplicationStatusJSONRequestBody defines body for UpdateJobApplicationStatus for application/json ContentType.
type UpdateJobApplicationStatusJSONRequestBody = UpdateApplicationStatusRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all jobs with search
	// (GET /api/v1/job)
	GetAllJobs(w http.ResponseWriter, r *http.Request, params GetAllJobsParams)
	// Create new job
	// (POST /api/v1/job)
	CreateJob(w http.ResponseWriter, r *http.Request)
	// Get my published jobs
	// (GET /api/v1/job/my)
	GetMyJobs(w http.ResponseWriter, r *http.Request, params GetMyJobsParams)
	// Delete job
	// (DELETE /api/v1/job/{job_id})
	DeleteJob(w http.ResponseWriter, r *http.Request, jobId string)
	// Get job by ID
	// (GET /api/v1/job/{job_id})
	GetJobById(w http.ResponseWriter, r *http.Request, jobId string)
	// Update job
	// (PUT /api/v1/job/{job_id})
	UpdateJob(w http.ResponseWriter, r *http.Request, jobId string)
	// Get job applications (for job author)
	// (GET /api/v1/job/{job_id}/applications)
	GetJobApplications(w http.ResponseWriter, r *http.Request, jobId string, params GetJobApplicationsParams)
	// Update job application status (for job author)
	// (PUT /api/v1/job/{job_id}/applications/{applicant_id}/status)
	UpdateJobApplicationStatus(w http.ResponseWriter, r *http.Request, jobId string, applicantId string)
	// Check application status
	// (GET /api/v1/job/{job_id}/apply)
	GetApplicationStatus(w http.ResponseWriter, r *http.Request, jobId string)
	// Apply to job
	// (POST /api/v1/job/{job_id}/apply)
	ApplyToJob(w http.ResponseWriter, r *http.Request, jobId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all jobs with search
// (GET /api/v1/job)
func (_ Unimplemented) GetAllJobs(w http.ResponseWriter, r *http.Request, params GetAllJobsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create new job
// (POST /api/v1/job)
func (_ Unimplemented) CreateJob(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get my published jobs
// (GET /api/v1/job/my)
func (_ Unimplemented) GetMyJobs(w http.ResponseWriter, r *http.Request, params GetMyJobsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete job
// (DELETE /api/v1/job/{job_id})
func (_ Unimplemented) DeleteJob(w http.ResponseWriter, r *http.Request, jobId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get job by ID
// (GET /api/v1/job/{job_id})
func (_ Unimplemented) GetJobById(w http.ResponseWriter, r *http.Request, jobId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update job
// (PUT /api/v1/job/{job_id})
func (_ Unimplemented) UpdateJob(w http.ResponseWriter, r *http.Request, jobId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get job applications (for job author)
// (GET /api/v1/job/{job_id}/applications)
func (_ Unimplemented) GetJobApplications(w http.ResponseWriter, r *http.Request, jobId string, params GetJobApplicationsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update job application status (for job author)
// (PUT /api/v1/job/{job_id}/applications/{applicant_id}/status)
func (_ Unimplemented) UpdateJobApplicationStatus(w http.ResponseWriter, r *http.Request, jobId string, applicantId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Check application status
// (GET /api/v1/job/{job_id}/apply)
func (_ Unimplemented) GetApplicationStatus(w http.ResponseWriter, r *http.Request, jobId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Apply to job
// (POST /api/v1/job/{job_id}/apply)
func (_ Unimplemented) ApplyToJob(w http.ResponseWriter, r *http.Request, jobId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllJobs operation middleware
func (siw *ServerInterfaceWrapper) GetAllJobs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllJobsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllJobs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateJob operation middleware
func (siw *ServerInterfaceWrapper) CreateJob(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateJob(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMyJobs operation middleware
func (siw *ServerInterfaceWrapper) GetMyJobs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMyJobsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMyJobs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteJob operation middleware
func (siw *ServerInterfaceWrapper) DeleteJob(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", chi.URLParam(r, "job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteJob(w, r, jobId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJobById operation middleware
func (siw *ServerInterfaceWrapper) GetJobById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", chi.URLParam(r, "job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobById(w, r, jobId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateJob operation middleware
func (siw *ServerInterfaceWrapper) UpdateJob(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", chi.URLParam(r, "job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateJob(w, r, jobId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJobApplications operation middleware
func (siw *ServerInterfaceWrapper) GetJobApplications(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", chi.URLParam(r, "job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobApplicationsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobApplications(w, r, jobId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateJobApplicationStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateJobApplicationStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", chi.URLParam(r, "job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	// ------------- Path parameter "applicant_id" -------------
	var applicantId string

	err = runtime.BindStyledParameterWithOptions("simple", "applicant_id", chi.URLParam(r, "applicant_id"), &applicantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "applicant_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateJobApplicationStatus(w, r, jobId, applicantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApplicationStatus operation middleware
func (siw *ServerInterfaceWrapper) GetApplicationStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", chi.URLParam(r, "job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApplicationStatus(w, r, jobId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ApplyToJob operation middleware
func (siw *ServerInterfaceWrapper) ApplyToJob(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", chi.URLParam(r, "job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ApplyToJob(w, r, jobId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/job", wrapper.GetAllJobs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/job", wrapper.CreateJob)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/job/my", wrapper.GetMyJobs)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/job/{job_id}", wrapper.DeleteJob)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/job/{job_id}", wrapper.GetJobById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/job/{job_id}", wrapper.UpdateJob)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/job/{job_id}/applications", wrapper.GetJobApplications)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/job/{job_id}/applications/{applicant_id}/status", wrapper.UpdateJobApplicationStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/job/{job_id}/apply", wrapper.GetApplicationStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/job/{job_id}/apply", wrapper.ApplyToJob)
	})

	return r
}
