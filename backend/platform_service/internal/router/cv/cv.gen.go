// Package cv provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package cv

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ApiUploadCVResp defines model for ApiUploadCVResp.
type ApiUploadCVResp struct {
	// Link Ссылка на загруженное резюме
	Link string `json:"link"`
}

// MatchCandidatesResponse defines model for MatchCandidatesResponse.
type MatchCandidatesResponse struct {
	Candidates []MatchedCandidate `json:"candidates"`
}

// MatchedCandidate defines model for MatchedCandidate.
type MatchedCandidate struct {
	CandidateName string `json:"candidate_name"`
	FileUrl       string `json:"file_url"`

	// MatchScore Оценка соответствия от 1 до 100
	MatchScore int `json:"match_score"`

	// Reasoning Объяснение почему кандидат подходит для вакансии
	Reasoning string `json:"reasoning"`
	ResumeId  string `json:"resume_id"`
}

// ResumeRecord defines model for ResumeRecord.
type ResumeRecord struct {
	Analysis        string    `json:"analysis"`
	CandidateAge    *int      `json:"candidate_age"`
	CandidateName   string    `json:"candidate_name"`
	CreatedAt       time.Time `json:"created_at"`
	ExperienceYears string    `json:"experience_years"`
	FileUrl         string    `json:"file_url"`
	Id              string    `json:"id"`
	UpdatedAt       time.Time `json:"updated_at"`
	UserId          string    `json:"user_id"`
}

// UploadDatabaseResponse defines model for UploadDatabaseResponse.
type UploadDatabaseResponse struct {
	FailedCount     int            `json:"failed_count"`
	ProcessedCount  int            `json:"processed_count"`
	Resumes         []ResumeRecord `json:"resumes"`
	SuccessfulCount int            `json:"successful_count"`
}

// GetResumeDatabaseParams defines parameters for GetResumeDatabase.
type GetResumeDatabaseParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// UploadResumeDatabaseMultipartBody defines parameters for UploadResumeDatabase.
type UploadResumeDatabaseMultipartBody struct {
	// Archive ZIP архив содержащий PDF, TXT, DOC, DOCX файлы резюме
	Archive *openapi_types.File `json:"archive,omitempty"`
}

// UploadCVMultipartBody defines parameters for UploadCV.
type UploadCVMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// UploadResumeDatabaseMultipartRequestBody defines body for UploadResumeDatabase for multipart/form-data ContentType.
type UploadResumeDatabaseMultipartRequestBody UploadResumeDatabaseMultipartBody

// UploadCVMultipartRequestBody defines body for UploadCV for multipart/form-data ContentType.
type UploadCVMultipartRequestBody UploadCVMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить базу резюме пользователя
	// (GET /api/v1/cv/database)
	GetResumeDatabase(w http.ResponseWriter, r *http.Request, params GetResumeDatabaseParams)
	// Подобрать кандидатов из базы резюме для вакансии
	// (POST /api/v1/cv/database/match/{job_id})
	MatchCandidatesFromDatabase(w http.ResponseWriter, r *http.Request, jobId string)
	// Загрузить архив с базой резюме
	// (POST /api/v1/cv/database/upload)
	UploadResumeDatabase(w http.ResponseWriter, r *http.Request)
	// Загрузить резюме
	// (POST /api/v1/cv/upload)
	UploadCV(w http.ResponseWriter, r *http.Request)
	// Получить резюме по имени файла
	// (GET /api/v1/cv/{filename})
	GetCVByFilename(w http.ResponseWriter, r *http.Request, filename string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Получить базу резюме пользователя
// (GET /api/v1/cv/database)
func (_ Unimplemented) GetResumeDatabase(w http.ResponseWriter, r *http.Request, params GetResumeDatabaseParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Подобрать кандидатов из базы резюме для вакансии
// (POST /api/v1/cv/database/match/{job_id})
func (_ Unimplemented) MatchCandidatesFromDatabase(w http.ResponseWriter, r *http.Request, jobId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Загрузить архив с базой резюме
// (POST /api/v1/cv/database/upload)
func (_ Unimplemented) UploadResumeDatabase(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Загрузить резюме
// (POST /api/v1/cv/upload)
func (_ Unimplemented) UploadCV(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить резюме по имени файла
// (GET /api/v1/cv/{filename})
func (_ Unimplemented) GetCVByFilename(w http.ResponseWriter, r *http.Request, filename string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetResumeDatabase operation middleware
func (siw *ServerInterfaceWrapper) GetResumeDatabase(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResumeDatabaseParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResumeDatabase(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// MatchCandidatesFromDatabase operation middleware
func (siw *ServerInterfaceWrapper) MatchCandidatesFromDatabase(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", chi.URLParam(r, "job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MatchCandidatesFromDatabase(w, r, jobId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadResumeDatabase operation middleware
func (siw *ServerInterfaceWrapper) UploadResumeDatabase(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadResumeDatabase(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadCV operation middleware
func (siw *ServerInterfaceWrapper) UploadCV(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadCV(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCVByFilename operation middleware
func (siw *ServerInterfaceWrapper) GetCVByFilename(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "filename" -------------
	var filename string

	err = runtime.BindStyledParameterWithOptions("simple", "filename", chi.URLParam(r, "filename"), &filename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filename", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCVByFilename(w, r, filename)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/cv/database", wrapper.GetResumeDatabase)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/cv/database/match/{job_id}", wrapper.MatchCandidatesFromDatabase)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/cv/database/upload", wrapper.UploadResumeDatabase)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/cv/upload", wrapper.UploadCV)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/cv/{filename}", wrapper.GetCVByFilename)
	})

	return r
}
