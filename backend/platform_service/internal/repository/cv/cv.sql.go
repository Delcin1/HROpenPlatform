// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cv.sql

package cv

import (
	"context"

	"github.com/google/uuid"
)

const createCV = `-- name: CreateCV :one
INSERT INTO cv.cv (
    guid,
    user_guid,
    link
) VALUES (
    $1, $2, $3
) RETURNING guid, user_guid, link, created_at, updated_at
`

type CreateCVParams struct {
	Guid     uuid.UUID
	UserGuid string
	Link     string
}

func (q *Queries) CreateCV(ctx context.Context, db DBTX, arg CreateCVParams) (CvCv, error) {
	row := db.QueryRow(ctx, createCV, arg.Guid, arg.UserGuid, arg.Link)
	var i CvCv
	err := row.Scan(
		&i.Guid,
		&i.UserGuid,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCV = `-- name: DeleteCV :exec
DELETE FROM cv.cv WHERE guid = $1
`

func (q *Queries) DeleteCV(ctx context.Context, db DBTX, guid uuid.UUID) error {
	_, err := db.Exec(ctx, deleteCV, guid)
	return err
}

const getCVByGUID = `-- name: GetCVByGUID :one
SELECT guid, user_guid, link, created_at, updated_at FROM cv.cv WHERE guid = $1
`

func (q *Queries) GetCVByGUID(ctx context.Context, db DBTX, guid uuid.UUID) (CvCv, error) {
	row := db.QueryRow(ctx, getCVByGUID, guid)
	var i CvCv
	err := row.Scan(
		&i.Guid,
		&i.UserGuid,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCVByUserGUID = `-- name: GetCVByUserGUID :one
SELECT guid, user_guid, link, created_at, updated_at FROM cv.cv WHERE user_guid = $1
`

func (q *Queries) GetCVByUserGUID(ctx context.Context, db DBTX, userGuid string) (CvCv, error) {
	row := db.QueryRow(ctx, getCVByUserGUID, userGuid)
	var i CvCv
	err := row.Scan(
		&i.Guid,
		&i.UserGuid,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCV = `-- name: UpdateCV :one
UPDATE cv.cv 
SET 
    link = $1
WHERE guid = $2
RETURNING guid, user_guid, link, created_at, updated_at
`

type UpdateCVParams struct {
	Link string
	Guid uuid.UUID
}

func (q *Queries) UpdateCV(ctx context.Context, db DBTX, arg UpdateCVParams) (CvCv, error) {
	row := db.QueryRow(ctx, updateCV, arg.Link, arg.Guid)
	var i CvCv
	err := row.Scan(
		&i.Guid,
		&i.UserGuid,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
