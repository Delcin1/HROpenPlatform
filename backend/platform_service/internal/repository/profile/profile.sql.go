// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: profile.sql

package profile

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profile.profiles (
    guid,
    is_hr,
    description,
    email,
    phone,
    gender,
    birthday,
    avatar,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING guid, is_hr, description, email, phone, gender, birthday, avatar, created_at, updated_at
`

type CreateProfileParams struct {
	Guid        uuid.UUID
	IsHr        sql.NullBool
	Description string
	Email       sql.NullString
	Phone       sql.NullString
	Gender      string
	Birthday    string
	Avatar      sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) CreateProfile(ctx context.Context, db DBTX, arg CreateProfileParams) (ProfileProfile, error) {
	row := db.QueryRow(ctx, createProfile,
		arg.Guid,
		arg.IsHr,
		arg.Description,
		arg.Email,
		arg.Phone,
		arg.Gender,
		arg.Birthday,
		arg.Avatar,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ProfileProfile
	err := row.Scan(
		&i.Guid,
		&i.IsHr,
		&i.Description,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.Birthday,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM profile.profiles WHERE guid = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, db DBTX, guid uuid.UUID) error {
	_, err := db.Exec(ctx, deleteProfile, guid)
	return err
}

const getProfileByEmail = `-- name: GetProfileByEmail :one
SELECT guid, is_hr, description, email, phone, gender, birthday, avatar, created_at, updated_at FROM profile.profiles WHERE email = $1
`

func (q *Queries) GetProfileByEmail(ctx context.Context, db DBTX, email sql.NullString) (ProfileProfile, error) {
	row := db.QueryRow(ctx, getProfileByEmail, email)
	var i ProfileProfile
	err := row.Scan(
		&i.Guid,
		&i.IsHr,
		&i.Description,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.Birthday,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileByGUID = `-- name: GetProfileByGUID :one
SELECT guid, is_hr, description, email, phone, gender, birthday, avatar, created_at, updated_at FROM profile.profiles WHERE guid = $1
`

func (q *Queries) GetProfileByGUID(ctx context.Context, db DBTX, guid uuid.UUID) (ProfileProfile, error) {
	row := db.QueryRow(ctx, getProfileByGUID, guid)
	var i ProfileProfile
	err := row.Scan(
		&i.Guid,
		&i.IsHr,
		&i.Description,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.Birthday,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileCompanies = `-- name: GetProfileCompanies :many
SELECT user_guid, company_guid, position, started_at, finished_at FROM company.profile_company WHERE user_guid = $1
`

func (q *Queries) GetProfileCompanies(ctx context.Context, db DBTX, userGuid uuid.UUID) ([]CompanyProfileCompany, error) {
	rows, err := db.Query(ctx, getProfileCompanies, userGuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyProfileCompany
	for rows.Next() {
		var i CompanyProfileCompany
		if err := rows.Scan(
			&i.UserGuid,
			&i.CompanyGuid,
			&i.Position,
			&i.StartedAt,
			&i.FinishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProfiles = `-- name: SearchProfiles :many
SELECT guid, is_hr, description, email, phone, gender, birthday, avatar, created_at, updated_at FROM profile.profiles 
WHERE description ILIKE '%' || $1 || '%'
ORDER BY updated_at DESC
`

func (q *Queries) SearchProfiles(ctx context.Context, db DBTX, dollar_1 sql.NullString) ([]ProfileProfile, error) {
	rows, err := db.Query(ctx, searchProfiles, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProfileProfile
	for rows.Next() {
		var i ProfileProfile
		if err := rows.Scan(
			&i.Guid,
			&i.IsHr,
			&i.Description,
			&i.Email,
			&i.Phone,
			&i.Gender,
			&i.Birthday,
			&i.Avatar,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profile.profiles 
SET 
    is_hr = $1,
    description = $2,
    email = $3,
    phone = $4,
    gender = $5,
    birthday = $6,
    avatar = $7,
    updated_at = $8
WHERE guid = $9
RETURNING guid, is_hr, description, email, phone, gender, birthday, avatar, created_at, updated_at
`

type UpdateProfileParams struct {
	IsHr        sql.NullBool
	Description string
	Email       sql.NullString
	Phone       sql.NullString
	Gender      string
	Birthday    string
	Avatar      sql.NullString
	UpdatedAt   sql.NullTime
	Guid        uuid.UUID
}

func (q *Queries) UpdateProfile(ctx context.Context, db DBTX, arg UpdateProfileParams) (ProfileProfile, error) {
	row := db.QueryRow(ctx, updateProfile,
		arg.IsHr,
		arg.Description,
		arg.Email,
		arg.Phone,
		arg.Gender,
		arg.Birthday,
		arg.Avatar,
		arg.UpdatedAt,
		arg.Guid,
	)
	var i ProfileProfile
	err := row.Scan(
		&i.Guid,
		&i.IsHr,
		&i.Description,
		&i.Email,
		&i.Phone,
		&i.Gender,
		&i.Birthday,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProfileCompany = `-- name: UpdateProfileCompany :one
UPDATE company.profile_company 
SET 
    position = $1,
    finished_at = $2
WHERE user_guid = $3 AND company_guid = $4
RETURNING user_guid, company_guid, position, started_at, finished_at
`

type UpdateProfileCompanyParams struct {
	Position    string
	FinishedAt  sql.NullTime
	UserGuid    uuid.UUID
	CompanyGuid uuid.UUID
}

func (q *Queries) UpdateProfileCompany(ctx context.Context, db DBTX, arg UpdateProfileCompanyParams) (CompanyProfileCompany, error) {
	row := db.QueryRow(ctx, updateProfileCompany,
		arg.Position,
		arg.FinishedAt,
		arg.UserGuid,
		arg.CompanyGuid,
	)
	var i CompanyProfileCompany
	err := row.Scan(
		&i.UserGuid,
		&i.CompanyGuid,
		&i.Position,
		&i.StartedAt,
		&i.FinishedAt,
	)
	return i, err
}
