// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chat.sql

package chat

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addUserToChat = `-- name: AddUserToChat :exec
INSERT INTO chat.chat_users (chat_id, user_id)
VALUES ($1, $2)
`

type AddUserToChatParams struct {
	ChatID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) AddUserToChat(ctx context.Context, db DBTX, arg AddUserToChatParams) error {
	_, err := db.Exec(ctx, addUserToChat, arg.ChatID, arg.UserID)
	return err
}

const createChat = `-- name: CreateChat :one
INSERT INTO chat.chats (created_at, updated_at)
VALUES (NOW(), NOW())
RETURNING id, created_at, updated_at
`

func (q *Queries) CreateChat(ctx context.Context, db DBTX) (ChatChat, error) {
	row := db.QueryRow(ctx, createChat)
	var i ChatChat
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO chat.messages (chat_id, user_id, text)
VALUES ($1, $2, $3)
RETURNING id, chat_id, user_id, text, created_at
`

type CreateMessageParams struct {
	ChatID uuid.UUID
	UserID uuid.UUID
	Text   string
}

func (q *Queries) CreateMessage(ctx context.Context, db DBTX, arg CreateMessageParams) (ChatMessage, error) {
	row := db.QueryRow(ctx, createMessage, arg.ChatID, arg.UserID, arg.Text)
	var i ChatMessage
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.UserID,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}

const getChatByID = `-- name: GetChatByID :one
SELECT c.id, c.created_at, c.updated_at, array_agg(cu.user_id) as users
FROM chat.chats c
JOIN chat.chat_users cu ON c.id = cu.chat_id
WHERE c.id = $1
GROUP BY c.id
`

type GetChatByIDRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Users     interface{}
}

func (q *Queries) GetChatByID(ctx context.Context, db DBTX, id uuid.UUID) (GetChatByIDRow, error) {
	row := db.QueryRow(ctx, getChatByID, id)
	var i GetChatByIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Users,
	)
	return i, err
}

const getChatMessages = `-- name: GetChatMessages :many
SELECT id, chat_id, user_id, text, created_at
FROM chat.messages
WHERE chat_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetChatMessagesParams struct {
	ChatID uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) GetChatMessages(ctx context.Context, db DBTX, arg GetChatMessagesParams) ([]ChatMessage, error) {
	rows, err := db.Query(ctx, getChatMessages, arg.ChatID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatMessage
	for rows.Next() {
		var i ChatMessage
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.UserID,
			&i.Text,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastMessage = `-- name: GetLastMessage :one
SELECT id, chat_id, user_id, text, created_at
FROM chat.messages
WHERE chat_id = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastMessage(ctx context.Context, db DBTX, chatID uuid.UUID) (ChatMessage, error) {
	row := db.QueryRow(ctx, getLastMessage, chatID)
	var i ChatMessage
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.UserID,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}

const getUnreadCount = `-- name: GetUnreadCount :one
SELECT COUNT(*)
FROM chat.messages m
WHERE m.chat_id = $1 AND m.user_id != $2 AND m.created_at > (
    SELECT COALESCE(MAX(created_at), '1970-01-01'::timestamp)
    FROM chat.messages
    WHERE chat_id = $1 AND user_id = $2
)
`

type GetUnreadCountParams struct {
	ChatID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetUnreadCount(ctx context.Context, db DBTX, arg GetUnreadCountParams) (int64, error) {
	row := db.QueryRow(ctx, getUnreadCount, arg.ChatID, arg.UserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserChats = `-- name: GetUserChats :many
SELECT c.id, c.created_at, c.updated_at, array_agg(cu.user_id) as users
FROM chat.chats c
JOIN chat.chat_users cu ON c.id = cu.chat_id
WHERE cu.user_id = $1
GROUP BY c.id
ORDER BY c.updated_at DESC
`

type GetUserChatsRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Users     interface{}
}

func (q *Queries) GetUserChats(ctx context.Context, db DBTX, userID uuid.UUID) ([]GetUserChatsRow, error) {
	rows, err := db.Query(ctx, getUserChats, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserChatsRow
	for rows.Next() {
		var i GetUserChatsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Users,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChatUpdatedAt = `-- name: UpdateChatUpdatedAt :exec
UPDATE chat.chats
SET updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateChatUpdatedAt(ctx context.Context, db DBTX, id uuid.UUID) error {
	_, err := db.Exec(ctx, updateChatUpdatedAt, id)
	return err
}
