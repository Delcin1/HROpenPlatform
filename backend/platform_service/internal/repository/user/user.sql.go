// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package user

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE auth.users 
SET is_active = true, updated = $1 
WHERE guid = $2
`

type ActivateUserParams struct {
	Updated time.Time
	Guid    uuid.UUID
}

func (q *Queries) ActivateUser(ctx context.Context, db DBTX, arg ActivateUserParams) error {
	_, err := db.Exec(ctx, activateUser, arg.Updated, arg.Guid)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO auth.users (
    guid,
    email,
    password_hash,
    created,
    updated,
    is_active,
    verification_token
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING guid, email, password_hash, created, updated, is_active, verification_token
`

type CreateUserParams struct {
	Guid              uuid.UUID
	Email             string
	PasswordHash      string
	Created           time.Time
	Updated           time.Time
	IsActive          bool
	VerificationToken sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (AuthUser, error) {
	row := db.QueryRow(ctx, createUser,
		arg.Guid,
		arg.Email,
		arg.PasswordHash,
		arg.Created,
		arg.Updated,
		arg.IsActive,
		arg.VerificationToken,
	)
	var i AuthUser
	err := row.Scan(
		&i.Guid,
		&i.Email,
		&i.PasswordHash,
		&i.Created,
		&i.Updated,
		&i.IsActive,
		&i.VerificationToken,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT guid, email, password_hash, created, updated, is_active, verification_token FROM auth.users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, db DBTX, email string) (AuthUser, error) {
	row := db.QueryRow(ctx, getUserByEmail, email)
	var i AuthUser
	err := row.Scan(
		&i.Guid,
		&i.Email,
		&i.PasswordHash,
		&i.Created,
		&i.Updated,
		&i.IsActive,
		&i.VerificationToken,
	)
	return i, err
}

const getUserByGUID = `-- name: GetUserByGUID :one
SELECT guid, email, password_hash, created, updated, is_active, verification_token FROM auth.users WHERE guid = $1
`

func (q *Queries) GetUserByGUID(ctx context.Context, db DBTX, guid uuid.UUID) (AuthUser, error) {
	row := db.QueryRow(ctx, getUserByGUID, guid)
	var i AuthUser
	err := row.Scan(
		&i.Guid,
		&i.Email,
		&i.PasswordHash,
		&i.Created,
		&i.Updated,
		&i.IsActive,
		&i.VerificationToken,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE auth.users 
SET password_hash = $1, updated = $2 
WHERE guid = $3
`

type UpdateUserPasswordParams struct {
	PasswordHash string
	Updated      time.Time
	Guid         uuid.UUID
}

func (q *Queries) UpdateUserPassword(ctx context.Context, db DBTX, arg UpdateUserPasswordParams) error {
	_, err := db.Exec(ctx, updateUserPassword, arg.PasswordHash, arg.Updated, arg.Guid)
	return err
}

const updateVerificationToken = `-- name: UpdateVerificationToken :exec
UPDATE auth.users 
SET verification_token = $1, updated = $2 
WHERE guid = $3
`

type UpdateVerificationTokenParams struct {
	VerificationToken sql.NullString
	Updated           time.Time
	Guid              uuid.UUID
}

func (q *Queries) UpdateVerificationToken(ctx context.Context, db DBTX, arg UpdateVerificationTokenParams) error {
	_, err := db.Exec(ctx, updateVerificationToken, arg.VerificationToken, arg.Updated, arg.Guid)
	return err
}
