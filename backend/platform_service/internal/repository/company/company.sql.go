// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: company.sql

package company

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO company.companies (
    guid,
    name,
    description,
    email,
    phone,
    website,
    address,
    avatar,
    short_link_name
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING guid, name, description, email, phone, website, address, avatar, short_link_name
`

type CreateCompanyParams struct {
	Guid          uuid.UUID
	Name          string
	Description   sql.NullString
	Email         sql.NullString
	Phone         sql.NullString
	Website       sql.NullString
	Address       sql.NullString
	Avatar        sql.NullString
	ShortLinkName sql.NullString
}

func (q *Queries) CreateCompany(ctx context.Context, db DBTX, arg CreateCompanyParams) (CompanyCompany, error) {
	row := db.QueryRow(ctx, createCompany,
		arg.Guid,
		arg.Name,
		arg.Description,
		arg.Email,
		arg.Phone,
		arg.Website,
		arg.Address,
		arg.Avatar,
		arg.ShortLinkName,
	)
	var i CompanyCompany
	err := row.Scan(
		&i.Guid,
		&i.Name,
		&i.Description,
		&i.Email,
		&i.Phone,
		&i.Website,
		&i.Address,
		&i.Avatar,
		&i.ShortLinkName,
	)
	return i, err
}

const createProfileCompany = `-- name: CreateProfileCompany :one
INSERT INTO company.profile_company (
    user_guid,
    company_guid,
    position,
    started_at,
    finished_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING user_guid, company_guid, position, started_at, finished_at
`

type CreateProfileCompanyParams struct {
	UserGuid    uuid.UUID
	CompanyGuid uuid.UUID
	Position    string
	StartedAt   sql.NullTime
	FinishedAt  sql.NullTime
}

func (q *Queries) CreateProfileCompany(ctx context.Context, db DBTX, arg CreateProfileCompanyParams) (CompanyProfileCompany, error) {
	row := db.QueryRow(ctx, createProfileCompany,
		arg.UserGuid,
		arg.CompanyGuid,
		arg.Position,
		arg.StartedAt,
		arg.FinishedAt,
	)
	var i CompanyProfileCompany
	err := row.Scan(
		&i.UserGuid,
		&i.CompanyGuid,
		&i.Position,
		&i.StartedAt,
		&i.FinishedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM company.companies WHERE guid = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, db DBTX, guid uuid.UUID) error {
	_, err := db.Exec(ctx, deleteCompany, guid)
	return err
}

const deleteProfileCompany = `-- name: DeleteProfileCompany :exec
DELETE FROM company.profile_company 
WHERE user_guid = $1 AND company_guid = $2
`

type DeleteProfileCompanyParams struct {
	UserGuid    uuid.UUID
	CompanyGuid uuid.UUID
}

func (q *Queries) DeleteProfileCompany(ctx context.Context, db DBTX, arg DeleteProfileCompanyParams) error {
	_, err := db.Exec(ctx, deleteProfileCompany, arg.UserGuid, arg.CompanyGuid)
	return err
}

const getCompanyByGUID = `-- name: GetCompanyByGUID :one
SELECT guid, name, description, email, phone, website, address, avatar, short_link_name FROM company.companies WHERE guid = $1
`

func (q *Queries) GetCompanyByGUID(ctx context.Context, db DBTX, guid uuid.UUID) (CompanyCompany, error) {
	row := db.QueryRow(ctx, getCompanyByGUID, guid)
	var i CompanyCompany
	err := row.Scan(
		&i.Guid,
		&i.Name,
		&i.Description,
		&i.Email,
		&i.Phone,
		&i.Website,
		&i.Address,
		&i.Avatar,
		&i.ShortLinkName,
	)
	return i, err
}

const getCompanyByShortLink = `-- name: GetCompanyByShortLink :one
SELECT guid, name, description, email, phone, website, address, avatar, short_link_name FROM company.companies WHERE short_link_name = $1
`

func (q *Queries) GetCompanyByShortLink(ctx context.Context, db DBTX, shortLinkName sql.NullString) (CompanyCompany, error) {
	row := db.QueryRow(ctx, getCompanyByShortLink, shortLinkName)
	var i CompanyCompany
	err := row.Scan(
		&i.Guid,
		&i.Name,
		&i.Description,
		&i.Email,
		&i.Phone,
		&i.Website,
		&i.Address,
		&i.Avatar,
		&i.ShortLinkName,
	)
	return i, err
}

const getProfileCompanies = `-- name: GetProfileCompanies :many
SELECT user_guid, company_guid, position, started_at, finished_at FROM company.profile_company WHERE user_guid = $1
`

func (q *Queries) GetProfileCompanies(ctx context.Context, db DBTX, userGuid uuid.UUID) ([]CompanyProfileCompany, error) {
	rows, err := db.Query(ctx, getProfileCompanies, userGuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyProfileCompany
	for rows.Next() {
		var i CompanyProfileCompany
		if err := rows.Scan(
			&i.UserGuid,
			&i.CompanyGuid,
			&i.Position,
			&i.StartedAt,
			&i.FinishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfileCompany = `-- name: GetProfileCompany :one
SELECT user_guid, company_guid, position, started_at, finished_at FROM company.profile_company 
WHERE user_guid = $1 AND company_guid = $2
`

type GetProfileCompanyParams struct {
	UserGuid    uuid.UUID
	CompanyGuid uuid.UUID
}

func (q *Queries) GetProfileCompany(ctx context.Context, db DBTX, arg GetProfileCompanyParams) (CompanyProfileCompany, error) {
	row := db.QueryRow(ctx, getProfileCompany, arg.UserGuid, arg.CompanyGuid)
	var i CompanyProfileCompany
	err := row.Scan(
		&i.UserGuid,
		&i.CompanyGuid,
		&i.Position,
		&i.StartedAt,
		&i.FinishedAt,
	)
	return i, err
}

const searchCompanies = `-- name: SearchCompanies :many
SELECT guid, name, description, email, phone, website, address, avatar, short_link_name FROM company.companies 
WHERE name ILIKE '%' || $1 || '%'
LIMIT 10
`

func (q *Queries) SearchCompanies(ctx context.Context, db DBTX, dollar_1 sql.NullString) ([]CompanyCompany, error) {
	rows, err := db.Query(ctx, searchCompanies, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyCompany
	for rows.Next() {
		var i CompanyCompany
		if err := rows.Scan(
			&i.Guid,
			&i.Name,
			&i.Description,
			&i.Email,
			&i.Phone,
			&i.Website,
			&i.Address,
			&i.Avatar,
			&i.ShortLinkName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE company.companies 
SET 
    name = $1,
    description = $2,
    email = $3,
    phone = $4,
    website = $5,
    address = $6,
    avatar = $7,
    short_link_name = $8
WHERE guid = $9
RETURNING guid, name, description, email, phone, website, address, avatar, short_link_name
`

type UpdateCompanyParams struct {
	Name          string
	Description   sql.NullString
	Email         sql.NullString
	Phone         sql.NullString
	Website       sql.NullString
	Address       sql.NullString
	Avatar        sql.NullString
	ShortLinkName sql.NullString
	Guid          uuid.UUID
}

func (q *Queries) UpdateCompany(ctx context.Context, db DBTX, arg UpdateCompanyParams) (CompanyCompany, error) {
	row := db.QueryRow(ctx, updateCompany,
		arg.Name,
		arg.Description,
		arg.Email,
		arg.Phone,
		arg.Website,
		arg.Address,
		arg.Avatar,
		arg.ShortLinkName,
		arg.Guid,
	)
	var i CompanyCompany
	err := row.Scan(
		&i.Guid,
		&i.Name,
		&i.Description,
		&i.Email,
		&i.Phone,
		&i.Website,
		&i.Address,
		&i.Avatar,
		&i.ShortLinkName,
	)
	return i, err
}

const updateProfileCompany = `-- name: UpdateProfileCompany :one
UPDATE company.profile_company 
SET 
    position = $1,
    finished_at = $2,
    started_at = $3
WHERE user_guid = $4 AND company_guid = $5
RETURNING user_guid, company_guid, position, started_at, finished_at
`

type UpdateProfileCompanyParams struct {
	Position    string
	FinishedAt  sql.NullTime
	StartedAt   sql.NullTime
	UserGuid    uuid.UUID
	CompanyGuid uuid.UUID
}

func (q *Queries) UpdateProfileCompany(ctx context.Context, db DBTX, arg UpdateProfileCompanyParams) (CompanyProfileCompany, error) {
	row := db.QueryRow(ctx, updateProfileCompany,
		arg.Position,
		arg.FinishedAt,
		arg.StartedAt,
		arg.UserGuid,
		arg.CompanyGuid,
	)
	var i CompanyProfileCompany
	err := row.Scan(
		&i.UserGuid,
		&i.CompanyGuid,
		&i.Position,
		&i.StartedAt,
		&i.FinishedAt,
	)
	return i, err
}
